name: 'Deploy VibeSplit PWA to Production'

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
  quality-checks:
    runs-on: ubuntu-latest
    name: 'Quality Checks'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type checking
        run: npm run type-check

      - name: Check package.json and lock file consistency
        run: npm audit --audit-level=high

      # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–∏–ª–¥–∞
      - name: Test build process
        run: npm run build
        env:
          VITE_API_URL: https://api.vibesplit.com

      - name: Check build artifacts
        run: |
          test -f dist/index.html || exit 1
          test -f dist/manifest.json || exit 1
          echo "‚úÖ Build artifacts verified"

  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
  security-scan:
    runs-on: ubuntu-latest
    name: 'Security Scan'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # –ë–∏–ª–¥ –∏ –¥–µ–ø–ª–æ–π
  build-and-deploy:
    needs: [quality-checks, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build PWA application
        run: npm run build
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
          VITE_SENTRY_DSN: ${{ secrets.VITE_SENTRY_DSN }}
          VITE_ANALYTICS_KEY: ${{ secrets.VITE_ANALYTICS_KEY }}
          NODE_ENV: production

      - name: Verify PWA build
        run: |
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
          test -f dist/index.html || { echo "‚ùå index.html not found"; exit 1; }
          test -f dist/manifest.json || { echo "‚ùå manifest.json not found"; exit 1; }

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä bundle
          BUNDLE_SIZE=$(du -s dist/ | cut -f1)
          if [ $BUNDLE_SIZE -gt 51200 ]; then  # 50MB –ª–∏–º–∏—Ç
            echo "‚ö†Ô∏è Bundle size too large: ${BUNDLE_SIZE}KB"
            exit 1
          fi

          echo "‚úÖ PWA build verified successfully"
          echo "üì¶ Bundle size: ${BUNDLE_SIZE}KB"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYYMMDD-HHmmss'}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      # –î–µ–ø–ª–æ–π –Ω–∞ VPS
      - name: Deploy to Production VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          timeout: 300s
          script: |
            # –¶–≤–µ—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤
            RED='\033[0;31m'
            GREEN='\033[0;32m'
            YELLOW='\033[1;33m'
            NC='\033[0m' # No Color

            echo -e "${YELLOW}üöÄ Starting deployment...${NC}"

            # –õ–æ–≥–∏–Ω–∏–º—Å—è –≤ Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–∑
            NEW_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
            echo -e "${YELLOW}üì¶ Pulling new image: $NEW_IMAGE${NC}"
            docker pull $NEW_IMAGE

            # Blue-Green deployment —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
            CURRENT_CONTAINER=$(docker ps --filter "name=vibesplit-pwa" --format "{{.Names}}" | head -n1)

            if [ ! -z "$CURRENT_CONTAINER" ]; then
              echo -e "${YELLOW}üîÑ Found running container: $CURRENT_CONTAINER${NC}"
              NEW_CONTAINER="vibesplit-pwa-new"
            else
              NEW_CONTAINER="vibesplit-pwa"
            fi

            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            echo -e "${YELLOW}üöÄ Starting new container: $NEW_CONTAINER${NC}"
            docker run -d \
              --name $NEW_CONTAINER \
              --restart unless-stopped \
              -p 8080:80 \
              -v /var/log/vibesplit:/var/log/nginx \
              -e NODE_ENV=production \
              --health-cmd="curl -f http://localhost:80/health || exit 1" \
              --health-interval=30s \
              --health-timeout=10s \
              --health-retries=3 \
              $NEW_IMAGE

            # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            echo -e "${YELLOW}‚è≥ Waiting for container to be ready...${NC}"
            sleep 30

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º health check
            for i in {1..10}; do
              if docker exec $NEW_CONTAINER curl -f http://localhost:80/health > /dev/null 2>&1; then
                echo -e "${GREEN}‚úÖ Health check passed${NC}"
                break
              fi
              if [ $i -eq 10 ]; then
                echo -e "${RED}‚ùå Health check failed after 10 attempts${NC}"
                docker logs $NEW_CONTAINER
                docker stop $NEW_CONTAINER
                docker rm $NEW_CONTAINER
                exit 1
              fi
              echo -e "${YELLOW}‚è≥ Health check attempt $i/10...${NC}"
              sleep 10
            done

            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç—Ä–∞—Ñ–∏–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä)
            if [ ! -z "$CURRENT_CONTAINER" ] && [ "$CURRENT_CONTAINER" != "$NEW_CONTAINER" ]; then
              echo -e "${YELLOW}üîÑ Switching traffic to new container${NC}"
              
              # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
              docker stop $CURRENT_CONTAINER
              docker rm $CURRENT_CONTAINER
              
              # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
              docker rename $NEW_CONTAINER vibesplit-pwa
            fi

            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã
            echo -e "${YELLOW}üßπ Cleaning up old images${NC}"
            docker image prune -f

            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º Nginx –Ω–∞ —Ö–æ—Å—Ç–µ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
            if systemctl is-active --quiet nginx; then
              echo -e "${YELLOW}üîÑ Reloading Nginx${NC}"
              sudo nginx -t && sudo systemctl reload nginx
            fi

            echo -e "${GREEN}üéâ Deployment completed successfully!${NC}"

      # –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
      - name: Post-deployment verification
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            echo "üîç Verifying application accessibility..."

            # –õ–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if curl -f http://localhost:8080/health > /dev/null 2>&1; then
              echo "‚úÖ Local health check passed"
            else
              echo "‚ùå Local health check failed"
              exit 1
            fi

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º PWA —Ä–µ—Å—É—Ä—Å—ã
            if curl -f http://localhost:8080/manifest.json > /dev/null 2>&1; then
              echo "‚úÖ PWA manifest accessible"
            else
              echo "‚ùå PWA manifest not accessible"
            fi

            if curl -f http://localhost:8080/sw.js > /dev/null 2>&1; then
              echo "‚úÖ Service Worker accessible"
            else
              echo "‚ö†Ô∏è Service Worker not accessible"
            fi

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            echo "üìä Container statistics:"
            docker stats vibesplit-pwa --no-stream --format "table {{.Name}}\\t{{.CPUPerc}}\\t{{.MemUsage}}"

      # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –¥–µ–ø–ª–æ—è
      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            VibeSplit PWA Deployment Status: ${{ job.status }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Smoke tests –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
  smoke-tests:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Run smoke tests
        run: |
          # –ü—Ä–æ—Å—Ç—ã–µ smoke tests –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
          echo "üß™ Running smoke tests..."

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
          if curl -f https://vibesplit.com/ > /dev/null 2>&1; then
            echo "‚úÖ Main page accessible"
          else
            echo "‚ùå Main page not accessible"
            exit 1
          fi

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º PWA –º–∞–Ω–∏—Ñ–µ—Å—Ç
          if curl -f https://vibesplit.com/manifest.json > /dev/null 2>&1; then
            echo "‚úÖ PWA manifest accessible"
          else
            echo "‚ùå PWA manifest not accessible"
            exit 1
          fi

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º Service Worker
          if curl -f https://vibesplit.com/sw.js > /dev/null 2>&1; then
            echo "‚úÖ Service Worker accessible"
          else
            echo "‚ö†Ô∏è Service Worker not accessible"
          fi

          echo "üéâ Smoke tests completed successfully!"
