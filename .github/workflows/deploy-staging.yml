name: 'Deploy to Staging'

on:
  push:
    branches: [develop, staging]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è staging
  test-staging:
    runs-on: ubuntu-latest
    name: 'Staging Tests'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Build for staging
        run: npm run build
        env:
          VITE_API_URL: ${{ secrets.STAGING_API_URL }}
          VITE_ENVIRONMENT: staging
          NODE_ENV: production

  # –î–µ–ø–ª–æ–π –Ω–∞ staging
  deploy-staging:
    needs: test-staging
    runs-on: ubuntu-latest
    environment: staging
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for staging
        run: npm run build
        env:
          VITE_API_URL: ${{ secrets.STAGING_API_URL }}
          VITE_ENVIRONMENT: staging
          VITE_SENTRY_DSN: ${{ secrets.STAGING_SENTRY_DSN }}
          NODE_ENV: production

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,prefix=staging-
            type=sha,prefix=staging-{{branch}}-
            type=raw,value=staging-latest

      - name: Build and push Docker image for staging
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_VPS_HOST }}
          username: ${{ secrets.STAGING_VPS_USERNAME }}
          key: ${{ secrets.STAGING_VPS_SSH_KEY }}
          port: ${{ secrets.STAGING_VPS_PORT }}
          script: |
            echo "üöÄ Deploying to staging..."

            # –õ–æ–≥–∏–Ω–∏–º—Å—è –≤ registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π staging –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            docker stop vibesplit-pwa-staging || true
            docker rm vibesplit-pwa-staging || true

            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π staging –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            docker run -d \
              --name vibesplit-pwa-staging \
              --restart unless-stopped \
              -p 8081:80 \
              -v /var/log/vibesplit-staging:/var/log/nginx \
              -e NODE_ENV=production \
              -e VITE_ENVIRONMENT=staging \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-latest

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ staging
            sleep 15
            if curl -f http://localhost:8081/health; then
              echo "‚úÖ Staging deployment successful"
            else
              echo "‚ùå Staging deployment failed"
              docker logs vibesplit-pwa-staging
              exit 1
            fi

            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã
            docker image prune -f

      - name: Notify staging deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#staging-deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            VibeSplit Staging Deployment: ${{ job.status }}
            Branch: ${{ github.ref_name }}
            Environment: staging
            URL: https://staging.vibesplit.com
