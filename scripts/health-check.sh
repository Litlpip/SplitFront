#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

CONTAINER_NAME="vibesplit-pwa"
BASE_URL=${1:-"http://localhost:8080"}

echo -e "${BLUE}üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è VibeSplit PWA${NC}"
echo -e "${YELLOW}URL: $BASE_URL${NC}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ URL
check_url() {
    local url=$1
    local description=$2
    local expected_code=${3:-200}
    
    local response=$(curl -s -o /dev/null -w "%{http_code}" "$url" 2>/dev/null || echo "000")
    
    if [ "$response" = "$expected_code" ]; then
        echo -e "   ‚úÖ $description ($response)"
        return 0
    else
        echo -e "   ‚ùå $description ($response)"
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
echo -e "${BLUE}üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:${NC}"

if docker ps --format 'table {{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
    echo -e "   ‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º health status
    HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' $CONTAINER_NAME 2>/dev/null || echo "unknown")
    case $HEALTH_STATUS in
        "healthy")
            echo -e "   ‚úÖ Health status: healthy"
            ;;
        "unhealthy")
            echo -e "   ‚ùå Health status: unhealthy"
            ;;
        "starting")
            echo -e "   ‚è≥ Health status: starting"
            ;;
        *)
            echo -e "   ‚ö†Ô∏è  Health status: $HEALTH_STATUS"
            ;;
    esac
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    echo -e "${BLUE}üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:${NC}"
    docker stats $CONTAINER_NAME --no-stream --format "   CPU: {{.CPUPerc}} | RAM: {{.MemUsage}} | NET: {{.NetIO}}"
    
else
    echo -e "   ‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
echo -e "${BLUE}üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:${NC}"

FAILED=0

check_url "$BASE_URL/health" "Health endpoint" || FAILED=1
check_url "$BASE_URL/" "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞" || FAILED=1
check_url "$BASE_URL/manifest.json" "PWA Manifest" || FAILED=1
check_url "$BASE_URL/sw.js" "Service Worker" || FAILED=1

# –ü—Ä–æ–≤–µ—Ä–∫–∞ PWA —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
echo -e "${BLUE}üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ PWA —Ñ—É–Ω–∫—Ü–∏–π:${NC}"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
MANIFEST_CONTENT=$(curl -s "$BASE_URL/manifest.json" 2>/dev/null || echo "{}")

if echo "$MANIFEST_CONTENT" | grep -q '"name"'; then
    echo -e "   ‚úÖ Manifest —Å–æ–¥–µ—Ä–∂–∏—Ç name"
else
    echo -e "   ‚ùå Manifest –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç name"
    FAILED=1
fi

if echo "$MANIFEST_CONTENT" | grep -q '"start_url"'; then
    echo -e "   ‚úÖ Manifest —Å–æ–¥–µ—Ä–∂–∏—Ç start_url"
else
    echo -e "   ‚ùå Manifest –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç start_url"
    FAILED=1
fi

if echo "$MANIFEST_CONTENT" | grep -q '"icons"'; then
    echo -e "   ‚úÖ Manifest —Å–æ–¥–µ—Ä–∂–∏—Ç icons"
else
    echo -e "   ‚ùå Manifest –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç icons"
    FAILED=1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏
echo -e "${BLUE}üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤:${NC}"

ERROR_COUNT=$(docker logs $CONTAINER_NAME --since="1h" 2>&1 | grep -i error | wc -l)
if [ "$ERROR_COUNT" -eq 0 ]; then
    echo -e "   ‚úÖ –ù–µ—Ç –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å"
else
    echo -e "   ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ $ERROR_COUNT –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å"
    echo -e "${YELLOW}–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:${NC}"
    docker logs $CONTAINER_NAME --since="1h" 2>&1 | grep -i error | tail -5 | sed 's/^/     /'
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
echo -e "${BLUE}üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤:${NC}"

DISK_USAGE=$(df /var/lib/docker | awk 'NR==2{print $5}' | sed 's/%//')
if [ "$DISK_USAGE" -lt 80 ]; then
    echo -e "   ‚úÖ –î–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ: ${DISK_USAGE}%"
else
    echo -e "   ‚ö†Ô∏è  –î–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ: ${DISK_USAGE}% (–≤—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∞–ø—Ç–∞–π–º–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
STARTED_AT=$(docker inspect --format='{{.State.StartedAt}}' $CONTAINER_NAME)
echo -e "   üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: $STARTED_AT"

# –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
echo -e "${BLUE}üèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:${NC}"

if [ "$FAILED" -eq 0 ]; then
    echo -e "${GREEN}‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!${NC}"
    exit 0
else
    echo -e "${RED}‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã!${NC}"
    exit 1
fi