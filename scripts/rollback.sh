#!/bin/bash
# ะกะบัะธะฟั ะฑััััะพะณะพ ะพัะบะฐัะฐ ะบ ะฟัะตะดัะดััะตะน ะฒะตััะธะธ

set -e

# ะฆะฒะตัะฐ ะดะปั ะฒัะฒะพะดะฐ
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

CONTAINER_NAME="vibesplit-pwa"
BACKUP_CONTAINER="vibesplit-pwa-backup"

echo -e "${BLUE}๐ ะัะบะฐั VibeSplit PWA ะบ ะฟัะตะดัะดััะตะน ะฒะตััะธะธ${NC}"

# ะัะพะฒะตััะตะผ ะฝะฐะปะธัะธะต backup ะบะพะฝัะตะนะฝะตัะฐ
if ! docker ps -a --format 'table {{.Names}}' | grep -q "^${BACKUP_CONTAINER}$"; then
    echo -e "${RED}โ Backup ะบะพะฝัะตะนะฝะตั ะฝะต ะฝะฐะนะดะตะฝ!${NC}"
    echo -e "${YELLOW}ะะพะฟััะบะฐ ัะพะทะดะฐัั ะพัะบะฐั ะธะท ะพะฑัะฐะทะฐ...${NC}"
    
    # ะัะตะผ ะฟัะตะดัะดััะธะน ะพะฑัะฐะท
    LAST_IMAGE=$(docker images --filter "reference=vibesplit-pwa" --format "table {{.Repository}}:{{.Tag}}" | head -n2 | tail -n1)
    
    if [ -z "$LAST_IMAGE" ]; then
        echo -e "${RED}โ ะัะตะดัะดััะธะน ะพะฑัะฐะท ะฝะต ะฝะฐะนะดะตะฝ!${NC}"
        exit 1
    fi
    
    echo -e "${YELLOW}๐ฆ ะัะฟะพะปัะทัะตะผ ะพะฑัะฐะท: $LAST_IMAGE${NC}"
else
    echo -e "${GREEN}โ Backup ะบะพะฝัะตะนะฝะตั ะฝะฐะนะดะตะฝ${NC}"
fi

# ะััะฐะฝะฐะฒะปะธะฒะฐะตะผ ัะตะบััะธะน ะบะพะฝัะตะนะฝะตั
echo -e "${YELLOW}๐ ะััะฐะฝะฐะฒะปะธะฒะฐะตะผ ัะตะบััะธะน ะบะพะฝัะตะนะฝะตั...${NC}"
docker stop $CONTAINER_NAME || true

# ะะตัะตะธะผะตะฝะพะฒัะฒะฐะตะผ ัะตะบััะธะน ะบะพะฝัะตะนะฝะตั ะฒ failed
docker rename $CONTAINER_NAME "${CONTAINER_NAME}-failed-$(date +%Y%m%d-%H%M%S)" || true

if docker ps -a --format 'table {{.Names}}' | grep -q "^${BACKUP_CONTAINER}$"; then
    # ะะพัััะฐะฝะฐะฒะปะธะฒะฐะตะผ ะธะท backup ะบะพะฝัะตะนะฝะตัะฐ
    echo -e "${YELLOW}๐ ะะพัััะฐะฝะฐะฒะปะธะฒะฐะตะผ ะธะท backup ะบะพะฝัะตะนะฝะตัะฐ...${NC}"
    docker rename $BACKUP_CONTAINER $CONTAINER_NAME
    docker start $CONTAINER_NAME
else
    # ะกะพะทะดะฐะตะผ ะฝะพะฒัะน ะบะพะฝัะตะนะฝะตั ะธะท ะฟัะตะดัะดััะตะณะพ ะพะฑัะฐะทะฐ
    echo -e "${YELLOW}๐ ะกะพะทะดะฐะตะผ ะบะพะฝัะตะนะฝะตั ะธะท ะฟัะตะดัะดััะตะณะพ ะพะฑัะฐะทะฐ...${NC}"
    docker run -d \
        --name $CONTAINER_NAME \
        --restart unless-stopped \
        -p 8080:80 \
        -v /var/log/vibesplit:/var/log/nginx \
        --health-cmd="curl -f http://localhost:80/health || exit 1" \
        --health-interval=30s \
        --health-timeout=10s \
        --health-retries=3 \
        $LAST_IMAGE
fi

# ะะดะตะผ ะณะพัะพะฒะฝะพััะธ
echo -e "${YELLOW}โณ ะะดะตะผ ะณะพัะพะฒะฝะพััะธ ะบะพะฝัะตะนะฝะตัะฐ...${NC}"
sleep 15

# ะัะพะฒะตััะตะผ health check
for i in {1..10}; do
    if docker exec $CONTAINER_NAME curl -f http://localhost:80/health > /dev/null 2>&1; then
        echo -e "${GREEN}โ ะัะบะฐั ะฒัะฟะพะปะฝะตะฝ ััะฟะตัะฝะพ!${NC}"
        break
    fi
    if [ $i -eq 10 ]; then
        echo -e "${RED}โ ะัะบะฐั ะฝะต ัะดะฐะปัั!${NC}"
        docker logs $CONTAINER_NAME
        exit 1
    fi
    echo -e "${YELLOW}โณ ะัะพะฒะตัะบะฐ $i/10...${NC}"
    sleep 5
done

# ะะตัะตะทะฐะณััะถะฐะตะผ Nginx ะตัะปะธ ะฝะฐัััะพะตะฝ
if systemctl is-active --quiet nginx 2>/dev/null; then
    echo -e "${YELLOW}๐ ะะตัะตะทะฐะณััะถะฐะตะผ Nginx...${NC}"
    sudo nginx -t && sudo systemctl reload nginx
fi

echo -e "${GREEN}๐ ะัะบะฐั ะทะฐะฒะตััะตะฝ ััะฟะตัะฝะพ!${NC}"
echo -e "${BLUE}๐ ะะฝัะพัะผะฐัะธั:${NC}"
echo -e "   ๐ ะัะธะปะพะถะตะฝะธะต ะดะพัััะฟะฝะพ ะฟะพ: http://localhost:8080"
echo -e "   ๐ Health check: http://localhost:8080/health"
echo -e "   ๐ ะะพะณะธ: docker logs $CONTAINER_NAME"

# ะะพะบะฐะทัะฒะฐะตะผ ััะฐัะธััะธะบั
echo -e "${BLUE}๐ ะกัะฐัะธััะธะบะฐ ะบะพะฝัะตะนะฝะตัะฐ:${NC}"
docker stats $CONTAINER_NAME --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}"