/* tslint:disable */
/* eslint-disable */
/**
 * StuffyHelper.ApiGateway
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AddPurchaseEntry } from '../models';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { GetPurchaseEntry } from '../models';
// @ts-ignore
import type { GetPurchaseEntryResponse } from '../models';
// @ts-ignore
import type { PurchaseShortEntry } from '../models';
// @ts-ignore
import type { UpdatePurchaseEntry } from '../models';
/**
 * PurchaseApi - axios parameter creator
 */
export const PurchaseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [name] 
         * @param {number} [costMin] 
         * @param {number} [costMax] 
         * @param {string} [eventId] 
         * @param {Array<string>} [purchaseTags] 
         * @param {string} [unitTypeId] 
         * @param {boolean} [isComplete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PurchasesGet: async (offset?: number, limit?: number, name?: string, costMin?: number, costMax?: number, eventId?: string, purchaseTags?: Array<string>, unitTypeId?: string, isComplete?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/purchases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (costMin !== undefined) {
                localVarQueryParameter['costMin'] = costMin;
            }

            if (costMax !== undefined) {
                localVarQueryParameter['costMax'] = costMax;
            }

            if (eventId !== undefined) {
                localVarQueryParameter['eventId'] = eventId;
            }

            if (purchaseTags) {
                localVarQueryParameter['purchaseTags'] = purchaseTags;
            }

            if (unitTypeId !== undefined) {
                localVarQueryParameter['unitTypeId'] = unitTypeId;
            }

            if (isComplete !== undefined) {
                localVarQueryParameter['isComplete'] = isComplete;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AddPurchaseEntry} [addPurchaseEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PurchasesPost: async (addPurchaseEntry?: AddPurchaseEntry, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/purchases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addPurchaseEntry, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} purchaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PurchasesPurchaseIdDelete: async (purchaseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'purchaseId' is not null or undefined
            assertParamExists('apiV1PurchasesPurchaseIdDelete', 'purchaseId', purchaseId)
            const localVarPath = `/api/v1/purchases/{purchaseId}`
                .replace(`{${"purchaseId"}}`, encodeURIComponent(String(purchaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} purchaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PurchasesPurchaseIdGet: async (purchaseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'purchaseId' is not null or undefined
            assertParamExists('apiV1PurchasesPurchaseIdGet', 'purchaseId', purchaseId)
            const localVarPath = `/api/v1/purchases/{purchaseId}`
                .replace(`{${"purchaseId"}}`, encodeURIComponent(String(purchaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} purchaseId 
         * @param {UpdatePurchaseEntry} [updatePurchaseEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PurchasesPurchaseIdPatch: async (purchaseId: string, updatePurchaseEntry?: UpdatePurchaseEntry, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'purchaseId' is not null or undefined
            assertParamExists('apiV1PurchasesPurchaseIdPatch', 'purchaseId', purchaseId)
            const localVarPath = `/api/v1/purchases/{purchaseId}`
                .replace(`{${"purchaseId"}}`, encodeURIComponent(String(purchaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePurchaseEntry, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PurchaseApi - functional programming interface
 */
export const PurchaseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PurchaseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [name] 
         * @param {number} [costMin] 
         * @param {number} [costMax] 
         * @param {string} [eventId] 
         * @param {Array<string>} [purchaseTags] 
         * @param {string} [unitTypeId] 
         * @param {boolean} [isComplete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PurchasesGet(offset?: number, limit?: number, name?: string, costMin?: number, costMax?: number, eventId?: string, purchaseTags?: Array<string>, unitTypeId?: string, isComplete?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPurchaseEntryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PurchasesGet(offset, limit, name, costMin, costMax, eventId, purchaseTags, unitTypeId, isComplete, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseApi.apiV1PurchasesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AddPurchaseEntry} [addPurchaseEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PurchasesPost(addPurchaseEntry?: AddPurchaseEntry, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseShortEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PurchasesPost(addPurchaseEntry, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseApi.apiV1PurchasesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} purchaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PurchasesPurchaseIdDelete(purchaseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PurchasesPurchaseIdDelete(purchaseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseApi.apiV1PurchasesPurchaseIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} purchaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PurchasesPurchaseIdGet(purchaseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPurchaseEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PurchasesPurchaseIdGet(purchaseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseApi.apiV1PurchasesPurchaseIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} purchaseId 
         * @param {UpdatePurchaseEntry} [updatePurchaseEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PurchasesPurchaseIdPatch(purchaseId: string, updatePurchaseEntry?: UpdatePurchaseEntry, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseShortEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PurchasesPurchaseIdPatch(purchaseId, updatePurchaseEntry, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseApi.apiV1PurchasesPurchaseIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PurchaseApi - factory interface
 */
export const PurchaseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PurchaseApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [name] 
         * @param {number} [costMin] 
         * @param {number} [costMax] 
         * @param {string} [eventId] 
         * @param {Array<string>} [purchaseTags] 
         * @param {string} [unitTypeId] 
         * @param {boolean} [isComplete] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PurchasesGet(offset?: number, limit?: number, name?: string, costMin?: number, costMax?: number, eventId?: string, purchaseTags?: Array<string>, unitTypeId?: string, isComplete?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<GetPurchaseEntryResponse> {
            return localVarFp.apiV1PurchasesGet(offset, limit, name, costMin, costMax, eventId, purchaseTags, unitTypeId, isComplete, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AddPurchaseEntry} [addPurchaseEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PurchasesPost(addPurchaseEntry?: AddPurchaseEntry, options?: RawAxiosRequestConfig): AxiosPromise<PurchaseShortEntry> {
            return localVarFp.apiV1PurchasesPost(addPurchaseEntry, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} purchaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PurchasesPurchaseIdDelete(purchaseId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1PurchasesPurchaseIdDelete(purchaseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} purchaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PurchasesPurchaseIdGet(purchaseId: string, options?: RawAxiosRequestConfig): AxiosPromise<GetPurchaseEntry> {
            return localVarFp.apiV1PurchasesPurchaseIdGet(purchaseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} purchaseId 
         * @param {UpdatePurchaseEntry} [updatePurchaseEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PurchasesPurchaseIdPatch(purchaseId: string, updatePurchaseEntry?: UpdatePurchaseEntry, options?: RawAxiosRequestConfig): AxiosPromise<PurchaseShortEntry> {
            return localVarFp.apiV1PurchasesPurchaseIdPatch(purchaseId, updatePurchaseEntry, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PurchaseApi - object-oriented interface
 */
export class PurchaseApi extends BaseAPI {
    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {string} [name] 
     * @param {number} [costMin] 
     * @param {number} [costMax] 
     * @param {string} [eventId] 
     * @param {Array<string>} [purchaseTags] 
     * @param {string} [unitTypeId] 
     * @param {boolean} [isComplete] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1PurchasesGet(offset?: number, limit?: number, name?: string, costMin?: number, costMax?: number, eventId?: string, purchaseTags?: Array<string>, unitTypeId?: string, isComplete?: boolean, options?: RawAxiosRequestConfig) {
        return PurchaseApiFp(this.configuration).apiV1PurchasesGet(offset, limit, name, costMin, costMax, eventId, purchaseTags, unitTypeId, isComplete, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AddPurchaseEntry} [addPurchaseEntry] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1PurchasesPost(addPurchaseEntry?: AddPurchaseEntry, options?: RawAxiosRequestConfig) {
        return PurchaseApiFp(this.configuration).apiV1PurchasesPost(addPurchaseEntry, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} purchaseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1PurchasesPurchaseIdDelete(purchaseId: string, options?: RawAxiosRequestConfig) {
        return PurchaseApiFp(this.configuration).apiV1PurchasesPurchaseIdDelete(purchaseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} purchaseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1PurchasesPurchaseIdGet(purchaseId: string, options?: RawAxiosRequestConfig) {
        return PurchaseApiFp(this.configuration).apiV1PurchasesPurchaseIdGet(purchaseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} purchaseId 
     * @param {UpdatePurchaseEntry} [updatePurchaseEntry] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1PurchasesPurchaseIdPatch(purchaseId: string, updatePurchaseEntry?: UpdatePurchaseEntry, options?: RawAxiosRequestConfig) {
        return PurchaseApiFp(this.configuration).apiV1PurchasesPurchaseIdPatch(purchaseId, updatePurchaseEntry, options).then((request) => request(this.axios, this.basePath));
    }
}

