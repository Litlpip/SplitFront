/* tslint:disable */
/* eslint-disable */
/**
 * StuffyHelper.ApiGateway
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { GetMediaEntry } from '../models';
// @ts-ignore
import type { MediaShortEntry } from '../models';
// @ts-ignore
import type { MediaType } from '../models';
/**
 * MediaApi - axios parameter creator
 */
export const MediaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} eventId 
         * @param {MediaType} mediaType 
         * @param {File} [file] 
         * @param {string} [link] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MediaFormFilePost: async (eventId: string, mediaType: MediaType, file?: File, link?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('apiV1MediaFormFilePost', 'eventId', eventId)
            // verify required parameter 'mediaType' is not null or undefined
            assertParamExists('apiV1MediaFormFilePost', 'mediaType', mediaType)
            const localVarPath = `/api/v1/media/form-file`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (eventId !== undefined) { 
                localVarFormParams.append('EventId', eventId as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('File', file as any);
            }
    
            if (mediaType !== undefined) { 
                localVarFormParams.append('MediaType', mediaType as any);
            }
    
            if (link !== undefined) { 
                localVarFormParams.append('Link', link as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} mediaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MediaMediaIdDelete: async (mediaId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mediaId' is not null or undefined
            assertParamExists('apiV1MediaMediaIdDelete', 'mediaId', mediaId)
            const localVarPath = `/api/v1/media/{mediaId}`
                .replace(`{${"mediaId"}}`, encodeURIComponent(String(mediaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} mediaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MediaMediaIdFormFileGet: async (mediaId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mediaId' is not null or undefined
            assertParamExists('apiV1MediaMediaIdFormFileGet', 'mediaId', mediaId)
            const localVarPath = `/api/v1/media/{mediaId}/form-file`
                .replace(`{${"mediaId"}}`, encodeURIComponent(String(mediaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} mediaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MediaMediaIdMetadataGet: async (mediaId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mediaId' is not null or undefined
            assertParamExists('apiV1MediaMediaIdMetadataGet', 'mediaId', mediaId)
            const localVarPath = `/api/v1/media/{mediaId}/metadata`
                .replace(`{${"mediaId"}}`, encodeURIComponent(String(mediaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [eventId] 
         * @param {string} [createdDateStart] 
         * @param {string} [createdDateEnd] 
         * @param {MediaType} [mediaType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MediaMetadataGet: async (offset?: number, limit?: number, eventId?: string, createdDateStart?: string, createdDateEnd?: string, mediaType?: MediaType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/media/metadata`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (eventId !== undefined) {
                localVarQueryParameter['eventId'] = eventId;
            }

            if (createdDateStart !== undefined) {
                localVarQueryParameter['createdDateStart'] = (createdDateStart as any instanceof Date) ?
                    (createdDateStart as any).toISOString() :
                    createdDateStart;
            }

            if (createdDateEnd !== undefined) {
                localVarQueryParameter['createdDateEnd'] = (createdDateEnd as any instanceof Date) ?
                    (createdDateEnd as any).toISOString() :
                    createdDateEnd;
            }

            if (mediaType !== undefined) {
                localVarQueryParameter['mediaType'] = mediaType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MediaApi - functional programming interface
 */
export const MediaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MediaApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} eventId 
         * @param {MediaType} mediaType 
         * @param {File} [file] 
         * @param {string} [link] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1MediaFormFilePost(eventId: string, mediaType: MediaType, file?: File, link?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaShortEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1MediaFormFilePost(eventId, mediaType, file, link, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaApi.apiV1MediaFormFilePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} mediaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1MediaMediaIdDelete(mediaId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1MediaMediaIdDelete(mediaId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaApi.apiV1MediaMediaIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} mediaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1MediaMediaIdFormFileGet(mediaId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1MediaMediaIdFormFileGet(mediaId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaApi.apiV1MediaMediaIdFormFileGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} mediaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1MediaMediaIdMetadataGet(mediaId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMediaEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1MediaMediaIdMetadataGet(mediaId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaApi.apiV1MediaMediaIdMetadataGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [eventId] 
         * @param {string} [createdDateStart] 
         * @param {string} [createdDateEnd] 
         * @param {MediaType} [mediaType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1MediaMetadataGet(offset?: number, limit?: number, eventId?: string, createdDateStart?: string, createdDateEnd?: string, mediaType?: MediaType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MediaShortEntry>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1MediaMetadataGet(offset, limit, eventId, createdDateStart, createdDateEnd, mediaType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaApi.apiV1MediaMetadataGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MediaApi - factory interface
 */
export const MediaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MediaApiFp(configuration)
    return {
        /**
         * 
         * @param {string} eventId 
         * @param {MediaType} mediaType 
         * @param {File} [file] 
         * @param {string} [link] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MediaFormFilePost(eventId: string, mediaType: MediaType, file?: File, link?: string, options?: RawAxiosRequestConfig): AxiosPromise<MediaShortEntry> {
            return localVarFp.apiV1MediaFormFilePost(eventId, mediaType, file, link, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} mediaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MediaMediaIdDelete(mediaId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1MediaMediaIdDelete(mediaId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} mediaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MediaMediaIdFormFileGet(mediaId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1MediaMediaIdFormFileGet(mediaId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} mediaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MediaMediaIdMetadataGet(mediaId: string, options?: RawAxiosRequestConfig): AxiosPromise<GetMediaEntry> {
            return localVarFp.apiV1MediaMediaIdMetadataGet(mediaId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [eventId] 
         * @param {string} [createdDateStart] 
         * @param {string} [createdDateEnd] 
         * @param {MediaType} [mediaType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1MediaMetadataGet(offset?: number, limit?: number, eventId?: string, createdDateStart?: string, createdDateEnd?: string, mediaType?: MediaType, options?: RawAxiosRequestConfig): AxiosPromise<Array<MediaShortEntry>> {
            return localVarFp.apiV1MediaMetadataGet(offset, limit, eventId, createdDateStart, createdDateEnd, mediaType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MediaApi - object-oriented interface
 */
export class MediaApi extends BaseAPI {
    /**
     * 
     * @param {string} eventId 
     * @param {MediaType} mediaType 
     * @param {File} [file] 
     * @param {string} [link] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1MediaFormFilePost(eventId: string, mediaType: MediaType, file?: File, link?: string, options?: RawAxiosRequestConfig) {
        return MediaApiFp(this.configuration).apiV1MediaFormFilePost(eventId, mediaType, file, link, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} mediaId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1MediaMediaIdDelete(mediaId: string, options?: RawAxiosRequestConfig) {
        return MediaApiFp(this.configuration).apiV1MediaMediaIdDelete(mediaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} mediaId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1MediaMediaIdFormFileGet(mediaId: string, options?: RawAxiosRequestConfig) {
        return MediaApiFp(this.configuration).apiV1MediaMediaIdFormFileGet(mediaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} mediaId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1MediaMediaIdMetadataGet(mediaId: string, options?: RawAxiosRequestConfig) {
        return MediaApiFp(this.configuration).apiV1MediaMediaIdMetadataGet(mediaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {string} [eventId] 
     * @param {string} [createdDateStart] 
     * @param {string} [createdDateEnd] 
     * @param {MediaType} [mediaType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1MediaMetadataGet(offset?: number, limit?: number, eventId?: string, createdDateStart?: string, createdDateEnd?: string, mediaType?: MediaType, options?: RawAxiosRequestConfig) {
        return MediaApiFp(this.configuration).apiV1MediaMetadataGet(offset, limit, eventId, createdDateStart, createdDateEnd, mediaType, options).then((request) => request(this.axios, this.basePath));
    }
}

