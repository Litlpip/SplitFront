/* tslint:disable */
/* eslint-disable */
/**
 * StuffyHelper.ApiGateway
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { GetPurchaseTagEntry } from '../models';
// @ts-ignore
import type { PurchaseTagShortEntry } from '../models';
// @ts-ignore
import type { PurchaseTagShortEntryResponse } from '../models';
// @ts-ignore
import type { UpsertPurchaseTagEntry } from '../models';
/**
 * PurchaseTagApi - axios parameter creator
 */
export const PurchaseTagApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [name] 
         * @param {string} [purchaseId] 
         * @param {boolean} [isActive] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PurchaseTagsGet: async (offset?: number, limit?: number, name?: string, purchaseId?: string, isActive?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/purchase-tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (purchaseId !== undefined) {
                localVarQueryParameter['purchaseId'] = purchaseId;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['isActive'] = isActive;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpsertPurchaseTagEntry} [upsertPurchaseTagEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PurchaseTagsPost: async (upsertPurchaseTagEntry?: UpsertPurchaseTagEntry, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/purchase-tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(upsertPurchaseTagEntry, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} purchaseTagId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PurchaseTagsPurchaseTagIdDelete: async (purchaseTagId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'purchaseTagId' is not null or undefined
            assertParamExists('apiV1PurchaseTagsPurchaseTagIdDelete', 'purchaseTagId', purchaseTagId)
            const localVarPath = `/api/v1/purchase-tags/{purchaseTagId}`
                .replace(`{${"purchaseTagId"}}`, encodeURIComponent(String(purchaseTagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} purchaseTagId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PurchaseTagsPurchaseTagIdGet: async (purchaseTagId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'purchaseTagId' is not null or undefined
            assertParamExists('apiV1PurchaseTagsPurchaseTagIdGet', 'purchaseTagId', purchaseTagId)
            const localVarPath = `/api/v1/purchase-tags/{purchaseTagId}`
                .replace(`{${"purchaseTagId"}}`, encodeURIComponent(String(purchaseTagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} purchaseTagId 
         * @param {UpsertPurchaseTagEntry} [upsertPurchaseTagEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PurchaseTagsPurchaseTagIdPatch: async (purchaseTagId: string, upsertPurchaseTagEntry?: UpsertPurchaseTagEntry, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'purchaseTagId' is not null or undefined
            assertParamExists('apiV1PurchaseTagsPurchaseTagIdPatch', 'purchaseTagId', purchaseTagId)
            const localVarPath = `/api/v1/purchase-tags/{purchaseTagId}`
                .replace(`{${"purchaseTagId"}}`, encodeURIComponent(String(purchaseTagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(upsertPurchaseTagEntry, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PurchaseTagApi - functional programming interface
 */
export const PurchaseTagApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PurchaseTagApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [name] 
         * @param {string} [purchaseId] 
         * @param {boolean} [isActive] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PurchaseTagsGet(offset?: number, limit?: number, name?: string, purchaseId?: string, isActive?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseTagShortEntryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PurchaseTagsGet(offset, limit, name, purchaseId, isActive, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseTagApi.apiV1PurchaseTagsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpsertPurchaseTagEntry} [upsertPurchaseTagEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PurchaseTagsPost(upsertPurchaseTagEntry?: UpsertPurchaseTagEntry, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseTagShortEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PurchaseTagsPost(upsertPurchaseTagEntry, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseTagApi.apiV1PurchaseTagsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} purchaseTagId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PurchaseTagsPurchaseTagIdDelete(purchaseTagId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PurchaseTagsPurchaseTagIdDelete(purchaseTagId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseTagApi.apiV1PurchaseTagsPurchaseTagIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} purchaseTagId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PurchaseTagsPurchaseTagIdGet(purchaseTagId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPurchaseTagEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PurchaseTagsPurchaseTagIdGet(purchaseTagId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseTagApi.apiV1PurchaseTagsPurchaseTagIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} purchaseTagId 
         * @param {UpsertPurchaseTagEntry} [upsertPurchaseTagEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PurchaseTagsPurchaseTagIdPatch(purchaseTagId: string, upsertPurchaseTagEntry?: UpsertPurchaseTagEntry, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseTagShortEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PurchaseTagsPurchaseTagIdPatch(purchaseTagId, upsertPurchaseTagEntry, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseTagApi.apiV1PurchaseTagsPurchaseTagIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PurchaseTagApi - factory interface
 */
export const PurchaseTagApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PurchaseTagApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [name] 
         * @param {string} [purchaseId] 
         * @param {boolean} [isActive] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PurchaseTagsGet(offset?: number, limit?: number, name?: string, purchaseId?: string, isActive?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<PurchaseTagShortEntryResponse> {
            return localVarFp.apiV1PurchaseTagsGet(offset, limit, name, purchaseId, isActive, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpsertPurchaseTagEntry} [upsertPurchaseTagEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PurchaseTagsPost(upsertPurchaseTagEntry?: UpsertPurchaseTagEntry, options?: RawAxiosRequestConfig): AxiosPromise<PurchaseTagShortEntry> {
            return localVarFp.apiV1PurchaseTagsPost(upsertPurchaseTagEntry, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} purchaseTagId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PurchaseTagsPurchaseTagIdDelete(purchaseTagId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1PurchaseTagsPurchaseTagIdDelete(purchaseTagId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} purchaseTagId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PurchaseTagsPurchaseTagIdGet(purchaseTagId: string, options?: RawAxiosRequestConfig): AxiosPromise<GetPurchaseTagEntry> {
            return localVarFp.apiV1PurchaseTagsPurchaseTagIdGet(purchaseTagId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} purchaseTagId 
         * @param {UpsertPurchaseTagEntry} [upsertPurchaseTagEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PurchaseTagsPurchaseTagIdPatch(purchaseTagId: string, upsertPurchaseTagEntry?: UpsertPurchaseTagEntry, options?: RawAxiosRequestConfig): AxiosPromise<PurchaseTagShortEntry> {
            return localVarFp.apiV1PurchaseTagsPurchaseTagIdPatch(purchaseTagId, upsertPurchaseTagEntry, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PurchaseTagApi - object-oriented interface
 */
export class PurchaseTagApi extends BaseAPI {
    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {string} [name] 
     * @param {string} [purchaseId] 
     * @param {boolean} [isActive] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1PurchaseTagsGet(offset?: number, limit?: number, name?: string, purchaseId?: string, isActive?: boolean, options?: RawAxiosRequestConfig) {
        return PurchaseTagApiFp(this.configuration).apiV1PurchaseTagsGet(offset, limit, name, purchaseId, isActive, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpsertPurchaseTagEntry} [upsertPurchaseTagEntry] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1PurchaseTagsPost(upsertPurchaseTagEntry?: UpsertPurchaseTagEntry, options?: RawAxiosRequestConfig) {
        return PurchaseTagApiFp(this.configuration).apiV1PurchaseTagsPost(upsertPurchaseTagEntry, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} purchaseTagId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1PurchaseTagsPurchaseTagIdDelete(purchaseTagId: string, options?: RawAxiosRequestConfig) {
        return PurchaseTagApiFp(this.configuration).apiV1PurchaseTagsPurchaseTagIdDelete(purchaseTagId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} purchaseTagId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1PurchaseTagsPurchaseTagIdGet(purchaseTagId: string, options?: RawAxiosRequestConfig) {
        return PurchaseTagApiFp(this.configuration).apiV1PurchaseTagsPurchaseTagIdGet(purchaseTagId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} purchaseTagId 
     * @param {UpsertPurchaseTagEntry} [upsertPurchaseTagEntry] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1PurchaseTagsPurchaseTagIdPatch(purchaseTagId: string, upsertPurchaseTagEntry?: UpsertPurchaseTagEntry, options?: RawAxiosRequestConfig) {
        return PurchaseTagApiFp(this.configuration).apiV1PurchaseTagsPurchaseTagIdPatch(purchaseTagId, upsertPurchaseTagEntry, options).then((request) => request(this.axios, this.basePath));
    }
}

