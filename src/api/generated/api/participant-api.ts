/* tslint:disable */
/* eslint-disable */
/**
 * StuffyHelper.ApiGateway
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { GetParticipantEntry } from '../models';
// @ts-ignore
import type { ParticipantShortEntry } from '../models';
// @ts-ignore
import type { ParticipantShortEntryResponse } from '../models';
// @ts-ignore
import type { UpsertParticipantEntry } from '../models';
/**
 * ParticipantApi - axios parameter creator
 */
export const ParticipantApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [eventId] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ParticipantsGet: async (offset?: number, limit?: number, eventId?: string, userId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/participants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (eventId !== undefined) {
                localVarQueryParameter['eventId'] = eventId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} participantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ParticipantsParticipantIdDelete: async (participantId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'participantId' is not null or undefined
            assertParamExists('apiV1ParticipantsParticipantIdDelete', 'participantId', participantId)
            const localVarPath = `/api/v1/participants/{participantId}`
                .replace(`{${"participantId"}}`, encodeURIComponent(String(participantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} participantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ParticipantsParticipantIdGet: async (participantId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'participantId' is not null or undefined
            assertParamExists('apiV1ParticipantsParticipantIdGet', 'participantId', participantId)
            const localVarPath = `/api/v1/participants/{participantId}`
                .replace(`{${"participantId"}}`, encodeURIComponent(String(participantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpsertParticipantEntry} [upsertParticipantEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ParticipantsPost: async (upsertParticipantEntry?: UpsertParticipantEntry, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/participants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(upsertParticipantEntry, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ParticipantApi - functional programming interface
 */
export const ParticipantApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ParticipantApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [eventId] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ParticipantsGet(offset?: number, limit?: number, eventId?: string, userId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParticipantShortEntryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ParticipantsGet(offset, limit, eventId, userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ParticipantApi.apiV1ParticipantsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} participantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ParticipantsParticipantIdDelete(participantId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ParticipantsParticipantIdDelete(participantId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ParticipantApi.apiV1ParticipantsParticipantIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} participantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ParticipantsParticipantIdGet(participantId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetParticipantEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ParticipantsParticipantIdGet(participantId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ParticipantApi.apiV1ParticipantsParticipantIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpsertParticipantEntry} [upsertParticipantEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ParticipantsPost(upsertParticipantEntry?: UpsertParticipantEntry, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParticipantShortEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ParticipantsPost(upsertParticipantEntry, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ParticipantApi.apiV1ParticipantsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ParticipantApi - factory interface
 */
export const ParticipantApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ParticipantApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [eventId] 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ParticipantsGet(offset?: number, limit?: number, eventId?: string, userId?: string, options?: RawAxiosRequestConfig): AxiosPromise<ParticipantShortEntryResponse> {
            return localVarFp.apiV1ParticipantsGet(offset, limit, eventId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} participantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ParticipantsParticipantIdDelete(participantId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1ParticipantsParticipantIdDelete(participantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} participantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ParticipantsParticipantIdGet(participantId: string, options?: RawAxiosRequestConfig): AxiosPromise<GetParticipantEntry> {
            return localVarFp.apiV1ParticipantsParticipantIdGet(participantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpsertParticipantEntry} [upsertParticipantEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ParticipantsPost(upsertParticipantEntry?: UpsertParticipantEntry, options?: RawAxiosRequestConfig): AxiosPromise<ParticipantShortEntry> {
            return localVarFp.apiV1ParticipantsPost(upsertParticipantEntry, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ParticipantApi - object-oriented interface
 */
export class ParticipantApi extends BaseAPI {
    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {string} [eventId] 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1ParticipantsGet(offset?: number, limit?: number, eventId?: string, userId?: string, options?: RawAxiosRequestConfig) {
        return ParticipantApiFp(this.configuration).apiV1ParticipantsGet(offset, limit, eventId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} participantId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1ParticipantsParticipantIdDelete(participantId: string, options?: RawAxiosRequestConfig) {
        return ParticipantApiFp(this.configuration).apiV1ParticipantsParticipantIdDelete(participantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} participantId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1ParticipantsParticipantIdGet(participantId: string, options?: RawAxiosRequestConfig) {
        return ParticipantApiFp(this.configuration).apiV1ParticipantsParticipantIdGet(participantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpsertParticipantEntry} [upsertParticipantEntry] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1ParticipantsPost(upsertParticipantEntry?: UpsertParticipantEntry, options?: RawAxiosRequestConfig) {
        return ParticipantApiFp(this.configuration).apiV1ParticipantsPost(upsertParticipantEntry, options).then((request) => request(this.axios, this.basePath));
    }
}

