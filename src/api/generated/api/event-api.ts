/* tslint:disable */
/* eslint-disable */
/**
 * StuffyHelper.ApiGateway
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AddEventEntry } from '../models';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { EventShortEntry } from '../models';
// @ts-ignore
import type { EventShortEntryResponse } from '../models';
// @ts-ignore
import type { GetEventEntry } from '../models';
// @ts-ignore
import type { UpdateEventEntry } from '../models';
/**
 * EventApi - axios parameter creator
 */
export const EventApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1EventsEventIdCheckoutPost: async (eventId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('apiV1EventsEventIdCheckoutPost', 'eventId', eventId)
            const localVarPath = `/api/v1/events/{eventId}/checkout`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1EventsEventIdCompletePost: async (eventId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('apiV1EventsEventIdCompletePost', 'eventId', eventId)
            const localVarPath = `/api/v1/events/{eventId}/complete`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1EventsEventIdDelete: async (eventId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('apiV1EventsEventIdDelete', 'eventId', eventId)
            const localVarPath = `/api/v1/events/{eventId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1EventsEventIdGet: async (eventId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('apiV1EventsEventIdGet', 'eventId', eventId)
            const localVarPath = `/api/v1/events/{eventId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} eventId 
         * @param {UpdateEventEntry} [updateEventEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1EventsEventIdPatch: async (eventId: string, updateEventEntry?: UpdateEventEntry, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('apiV1EventsEventIdPatch', 'eventId', eventId)
            const localVarPath = `/api/v1/events/{eventId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateEventEntry, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1EventsEventIdPhotoDelete: async (eventId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('apiV1EventsEventIdPhotoDelete', 'eventId', eventId)
            const localVarPath = `/api/v1/events/{eventId}/photo`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} eventId 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1EventsEventIdPhotoPatch: async (eventId: string, file?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('apiV1EventsEventIdPhotoPatch', 'eventId', eventId)
            const localVarPath = `/api/v1/events/{eventId}/photo`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1EventsEventIdReopenPost: async (eventId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('apiV1EventsEventIdReopenPost', 'eventId', eventId)
            const localVarPath = `/api/v1/events/{eventId}/reopen`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {string} [createdDateStart] 
         * @param {string} [createdDateEnd] 
         * @param {string} [eventDateStartMin] 
         * @param {string} [eventDateStartMax] 
         * @param {string} [eventDateEndMin] 
         * @param {string} [eventDateEndMax] 
         * @param {string} [userId] 
         * @param {boolean} [isCompleted] 
         * @param {boolean} [isActive] 
         * @param {string} [participantId] 
         * @param {string} [purchaseId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1EventsGet: async (offset?: number, limit?: number, name?: string, description?: string, createdDateStart?: string, createdDateEnd?: string, eventDateStartMin?: string, eventDateStartMax?: string, eventDateEndMin?: string, eventDateEndMax?: string, userId?: string, isCompleted?: boolean, isActive?: boolean, participantId?: string, purchaseId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (createdDateStart !== undefined) {
                localVarQueryParameter['createdDateStart'] = (createdDateStart as any instanceof Date) ?
                    (createdDateStart as any).toISOString() :
                    createdDateStart;
            }

            if (createdDateEnd !== undefined) {
                localVarQueryParameter['createdDateEnd'] = (createdDateEnd as any instanceof Date) ?
                    (createdDateEnd as any).toISOString() :
                    createdDateEnd;
            }

            if (eventDateStartMin !== undefined) {
                localVarQueryParameter['eventDateStartMin'] = (eventDateStartMin as any instanceof Date) ?
                    (eventDateStartMin as any).toISOString() :
                    eventDateStartMin;
            }

            if (eventDateStartMax !== undefined) {
                localVarQueryParameter['eventDateStartMax'] = (eventDateStartMax as any instanceof Date) ?
                    (eventDateStartMax as any).toISOString() :
                    eventDateStartMax;
            }

            if (eventDateEndMin !== undefined) {
                localVarQueryParameter['eventDateEndMin'] = (eventDateEndMin as any instanceof Date) ?
                    (eventDateEndMin as any).toISOString() :
                    eventDateEndMin;
            }

            if (eventDateEndMax !== undefined) {
                localVarQueryParameter['eventDateEndMax'] = (eventDateEndMax as any instanceof Date) ?
                    (eventDateEndMax as any).toISOString() :
                    eventDateEndMax;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (isCompleted !== undefined) {
                localVarQueryParameter['isCompleted'] = isCompleted;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['isActive'] = isActive;
            }

            if (participantId !== undefined) {
                localVarQueryParameter['participantId'] = participantId;
            }

            if (purchaseId !== undefined) {
                localVarQueryParameter['purchaseId'] = purchaseId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AddEventEntry} [addEventEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1EventsPost: async (addEventEntry?: AddEventEntry, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addEventEntry, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventApi - functional programming interface
 */
export const EventApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1EventsEventIdCheckoutPost(eventId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1EventsEventIdCheckoutPost(eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.apiV1EventsEventIdCheckoutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1EventsEventIdCompletePost(eventId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventShortEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1EventsEventIdCompletePost(eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.apiV1EventsEventIdCompletePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1EventsEventIdDelete(eventId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1EventsEventIdDelete(eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.apiV1EventsEventIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1EventsEventIdGet(eventId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEventEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1EventsEventIdGet(eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.apiV1EventsEventIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} eventId 
         * @param {UpdateEventEntry} [updateEventEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1EventsEventIdPatch(eventId: string, updateEventEntry?: UpdateEventEntry, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventShortEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1EventsEventIdPatch(eventId, updateEventEntry, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.apiV1EventsEventIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1EventsEventIdPhotoDelete(eventId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1EventsEventIdPhotoDelete(eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.apiV1EventsEventIdPhotoDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} eventId 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1EventsEventIdPhotoPatch(eventId: string, file?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventShortEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1EventsEventIdPhotoPatch(eventId, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.apiV1EventsEventIdPhotoPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1EventsEventIdReopenPost(eventId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventShortEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1EventsEventIdReopenPost(eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.apiV1EventsEventIdReopenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {string} [createdDateStart] 
         * @param {string} [createdDateEnd] 
         * @param {string} [eventDateStartMin] 
         * @param {string} [eventDateStartMax] 
         * @param {string} [eventDateEndMin] 
         * @param {string} [eventDateEndMax] 
         * @param {string} [userId] 
         * @param {boolean} [isCompleted] 
         * @param {boolean} [isActive] 
         * @param {string} [participantId] 
         * @param {string} [purchaseId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1EventsGet(offset?: number, limit?: number, name?: string, description?: string, createdDateStart?: string, createdDateEnd?: string, eventDateStartMin?: string, eventDateStartMax?: string, eventDateEndMin?: string, eventDateEndMax?: string, userId?: string, isCompleted?: boolean, isActive?: boolean, participantId?: string, purchaseId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventShortEntryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1EventsGet(offset, limit, name, description, createdDateStart, createdDateEnd, eventDateStartMin, eventDateStartMax, eventDateEndMin, eventDateEndMax, userId, isCompleted, isActive, participantId, purchaseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.apiV1EventsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AddEventEntry} [addEventEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1EventsPost(addEventEntry?: AddEventEntry, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventShortEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1EventsPost(addEventEntry, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventApi.apiV1EventsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EventApi - factory interface
 */
export const EventApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventApiFp(configuration)
    return {
        /**
         * 
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1EventsEventIdCheckoutPost(eventId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1EventsEventIdCheckoutPost(eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1EventsEventIdCompletePost(eventId: string, options?: RawAxiosRequestConfig): AxiosPromise<EventShortEntry> {
            return localVarFp.apiV1EventsEventIdCompletePost(eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1EventsEventIdDelete(eventId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1EventsEventIdDelete(eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1EventsEventIdGet(eventId: string, options?: RawAxiosRequestConfig): AxiosPromise<GetEventEntry> {
            return localVarFp.apiV1EventsEventIdGet(eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} eventId 
         * @param {UpdateEventEntry} [updateEventEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1EventsEventIdPatch(eventId: string, updateEventEntry?: UpdateEventEntry, options?: RawAxiosRequestConfig): AxiosPromise<EventShortEntry> {
            return localVarFp.apiV1EventsEventIdPatch(eventId, updateEventEntry, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1EventsEventIdPhotoDelete(eventId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1EventsEventIdPhotoDelete(eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} eventId 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1EventsEventIdPhotoPatch(eventId: string, file?: File, options?: RawAxiosRequestConfig): AxiosPromise<EventShortEntry> {
            return localVarFp.apiV1EventsEventIdPhotoPatch(eventId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} eventId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1EventsEventIdReopenPost(eventId: string, options?: RawAxiosRequestConfig): AxiosPromise<EventShortEntry> {
            return localVarFp.apiV1EventsEventIdReopenPost(eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [name] 
         * @param {string} [description] 
         * @param {string} [createdDateStart] 
         * @param {string} [createdDateEnd] 
         * @param {string} [eventDateStartMin] 
         * @param {string} [eventDateStartMax] 
         * @param {string} [eventDateEndMin] 
         * @param {string} [eventDateEndMax] 
         * @param {string} [userId] 
         * @param {boolean} [isCompleted] 
         * @param {boolean} [isActive] 
         * @param {string} [participantId] 
         * @param {string} [purchaseId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1EventsGet(offset?: number, limit?: number, name?: string, description?: string, createdDateStart?: string, createdDateEnd?: string, eventDateStartMin?: string, eventDateStartMax?: string, eventDateEndMin?: string, eventDateEndMax?: string, userId?: string, isCompleted?: boolean, isActive?: boolean, participantId?: string, purchaseId?: string, options?: RawAxiosRequestConfig): AxiosPromise<EventShortEntryResponse> {
            return localVarFp.apiV1EventsGet(offset, limit, name, description, createdDateStart, createdDateEnd, eventDateStartMin, eventDateStartMax, eventDateEndMin, eventDateEndMax, userId, isCompleted, isActive, participantId, purchaseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AddEventEntry} [addEventEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1EventsPost(addEventEntry?: AddEventEntry, options?: RawAxiosRequestConfig): AxiosPromise<EventShortEntry> {
            return localVarFp.apiV1EventsPost(addEventEntry, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventApi - object-oriented interface
 */
export class EventApi extends BaseAPI {
    /**
     * 
     * @param {string} eventId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1EventsEventIdCheckoutPost(eventId: string, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).apiV1EventsEventIdCheckoutPost(eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} eventId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1EventsEventIdCompletePost(eventId: string, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).apiV1EventsEventIdCompletePost(eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} eventId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1EventsEventIdDelete(eventId: string, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).apiV1EventsEventIdDelete(eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} eventId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1EventsEventIdGet(eventId: string, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).apiV1EventsEventIdGet(eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} eventId 
     * @param {UpdateEventEntry} [updateEventEntry] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1EventsEventIdPatch(eventId: string, updateEventEntry?: UpdateEventEntry, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).apiV1EventsEventIdPatch(eventId, updateEventEntry, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} eventId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1EventsEventIdPhotoDelete(eventId: string, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).apiV1EventsEventIdPhotoDelete(eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} eventId 
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1EventsEventIdPhotoPatch(eventId: string, file?: File, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).apiV1EventsEventIdPhotoPatch(eventId, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} eventId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1EventsEventIdReopenPost(eventId: string, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).apiV1EventsEventIdReopenPost(eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {string} [name] 
     * @param {string} [description] 
     * @param {string} [createdDateStart] 
     * @param {string} [createdDateEnd] 
     * @param {string} [eventDateStartMin] 
     * @param {string} [eventDateStartMax] 
     * @param {string} [eventDateEndMin] 
     * @param {string} [eventDateEndMax] 
     * @param {string} [userId] 
     * @param {boolean} [isCompleted] 
     * @param {boolean} [isActive] 
     * @param {string} [participantId] 
     * @param {string} [purchaseId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1EventsGet(offset?: number, limit?: number, name?: string, description?: string, createdDateStart?: string, createdDateEnd?: string, eventDateStartMin?: string, eventDateStartMax?: string, eventDateEndMin?: string, eventDateEndMax?: string, userId?: string, isCompleted?: boolean, isActive?: boolean, participantId?: string, purchaseId?: string, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).apiV1EventsGet(offset, limit, name, description, createdDateStart, createdDateEnd, eventDateStartMin, eventDateStartMax, eventDateEndMin, eventDateEndMax, userId, isCompleted, isActive, participantId, purchaseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AddEventEntry} [addEventEntry] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1EventsPost(addEventEntry?: AddEventEntry, options?: RawAxiosRequestConfig) {
        return EventApiFp(this.configuration).apiV1EventsPost(addEventEntry, options).then((request) => request(this.axios, this.basePath));
    }
}

