/* tslint:disable */
/* eslint-disable */
/**
 * StuffyHelper.ApiGateway
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { GetPurchaseUsageEntry } from '../models';
// @ts-ignore
import type { PurchaseUsageShortEntry } from '../models';
// @ts-ignore
import type { PurchaseUsageShortEntryResponse } from '../models';
// @ts-ignore
import type { UpsertPurchaseUsageEntry } from '../models';
/**
 * PurchaseUsageApi - axios parameter creator
 */
export const PurchaseUsageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [eventId] 
         * @param {string} [participantId] 
         * @param {string} [purchaseId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PurchaseUsagesGet: async (offset?: number, limit?: number, eventId?: string, participantId?: string, purchaseId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/purchase-usages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (eventId !== undefined) {
                localVarQueryParameter['eventId'] = eventId;
            }

            if (participantId !== undefined) {
                localVarQueryParameter['participantId'] = participantId;
            }

            if (purchaseId !== undefined) {
                localVarQueryParameter['purchaseId'] = purchaseId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpsertPurchaseUsageEntry} [upsertPurchaseUsageEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PurchaseUsagesPost: async (upsertPurchaseUsageEntry?: UpsertPurchaseUsageEntry, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/purchase-usages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(upsertPurchaseUsageEntry, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} purchaseUsageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PurchaseUsagesPurchaseUsageIdDelete: async (purchaseUsageId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'purchaseUsageId' is not null or undefined
            assertParamExists('apiV1PurchaseUsagesPurchaseUsageIdDelete', 'purchaseUsageId', purchaseUsageId)
            const localVarPath = `/api/v1/purchase-usages/{purchaseUsageId}`
                .replace(`{${"purchaseUsageId"}}`, encodeURIComponent(String(purchaseUsageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} purchaseUsageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PurchaseUsagesPurchaseUsageIdGet: async (purchaseUsageId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'purchaseUsageId' is not null or undefined
            assertParamExists('apiV1PurchaseUsagesPurchaseUsageIdGet', 'purchaseUsageId', purchaseUsageId)
            const localVarPath = `/api/v1/purchase-usages/{purchaseUsageId}`
                .replace(`{${"purchaseUsageId"}}`, encodeURIComponent(String(purchaseUsageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} purchaseUsageId 
         * @param {UpsertPurchaseUsageEntry} [upsertPurchaseUsageEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PurchaseUsagesPurchaseUsageIdPatch: async (purchaseUsageId: string, upsertPurchaseUsageEntry?: UpsertPurchaseUsageEntry, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'purchaseUsageId' is not null or undefined
            assertParamExists('apiV1PurchaseUsagesPurchaseUsageIdPatch', 'purchaseUsageId', purchaseUsageId)
            const localVarPath = `/api/v1/purchase-usages/{purchaseUsageId}`
                .replace(`{${"purchaseUsageId"}}`, encodeURIComponent(String(purchaseUsageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(upsertPurchaseUsageEntry, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PurchaseUsageApi - functional programming interface
 */
export const PurchaseUsageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PurchaseUsageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [eventId] 
         * @param {string} [participantId] 
         * @param {string} [purchaseId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PurchaseUsagesGet(offset?: number, limit?: number, eventId?: string, participantId?: string, purchaseId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseUsageShortEntryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PurchaseUsagesGet(offset, limit, eventId, participantId, purchaseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseUsageApi.apiV1PurchaseUsagesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpsertPurchaseUsageEntry} [upsertPurchaseUsageEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PurchaseUsagesPost(upsertPurchaseUsageEntry?: UpsertPurchaseUsageEntry, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseUsageShortEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PurchaseUsagesPost(upsertPurchaseUsageEntry, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseUsageApi.apiV1PurchaseUsagesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} purchaseUsageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PurchaseUsagesPurchaseUsageIdDelete(purchaseUsageId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PurchaseUsagesPurchaseUsageIdDelete(purchaseUsageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseUsageApi.apiV1PurchaseUsagesPurchaseUsageIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} purchaseUsageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PurchaseUsagesPurchaseUsageIdGet(purchaseUsageId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPurchaseUsageEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PurchaseUsagesPurchaseUsageIdGet(purchaseUsageId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseUsageApi.apiV1PurchaseUsagesPurchaseUsageIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} purchaseUsageId 
         * @param {UpsertPurchaseUsageEntry} [upsertPurchaseUsageEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PurchaseUsagesPurchaseUsageIdPatch(purchaseUsageId: string, upsertPurchaseUsageEntry?: UpsertPurchaseUsageEntry, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseUsageShortEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PurchaseUsagesPurchaseUsageIdPatch(purchaseUsageId, upsertPurchaseUsageEntry, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseUsageApi.apiV1PurchaseUsagesPurchaseUsageIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PurchaseUsageApi - factory interface
 */
export const PurchaseUsageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PurchaseUsageApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {string} [eventId] 
         * @param {string} [participantId] 
         * @param {string} [purchaseId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PurchaseUsagesGet(offset?: number, limit?: number, eventId?: string, participantId?: string, purchaseId?: string, options?: RawAxiosRequestConfig): AxiosPromise<PurchaseUsageShortEntryResponse> {
            return localVarFp.apiV1PurchaseUsagesGet(offset, limit, eventId, participantId, purchaseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpsertPurchaseUsageEntry} [upsertPurchaseUsageEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PurchaseUsagesPost(upsertPurchaseUsageEntry?: UpsertPurchaseUsageEntry, options?: RawAxiosRequestConfig): AxiosPromise<PurchaseUsageShortEntry> {
            return localVarFp.apiV1PurchaseUsagesPost(upsertPurchaseUsageEntry, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} purchaseUsageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PurchaseUsagesPurchaseUsageIdDelete(purchaseUsageId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1PurchaseUsagesPurchaseUsageIdDelete(purchaseUsageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} purchaseUsageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PurchaseUsagesPurchaseUsageIdGet(purchaseUsageId: string, options?: RawAxiosRequestConfig): AxiosPromise<GetPurchaseUsageEntry> {
            return localVarFp.apiV1PurchaseUsagesPurchaseUsageIdGet(purchaseUsageId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} purchaseUsageId 
         * @param {UpsertPurchaseUsageEntry} [upsertPurchaseUsageEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PurchaseUsagesPurchaseUsageIdPatch(purchaseUsageId: string, upsertPurchaseUsageEntry?: UpsertPurchaseUsageEntry, options?: RawAxiosRequestConfig): AxiosPromise<PurchaseUsageShortEntry> {
            return localVarFp.apiV1PurchaseUsagesPurchaseUsageIdPatch(purchaseUsageId, upsertPurchaseUsageEntry, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PurchaseUsageApi - object-oriented interface
 */
export class PurchaseUsageApi extends BaseAPI {
    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {string} [eventId] 
     * @param {string} [participantId] 
     * @param {string} [purchaseId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1PurchaseUsagesGet(offset?: number, limit?: number, eventId?: string, participantId?: string, purchaseId?: string, options?: RawAxiosRequestConfig) {
        return PurchaseUsageApiFp(this.configuration).apiV1PurchaseUsagesGet(offset, limit, eventId, participantId, purchaseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpsertPurchaseUsageEntry} [upsertPurchaseUsageEntry] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1PurchaseUsagesPost(upsertPurchaseUsageEntry?: UpsertPurchaseUsageEntry, options?: RawAxiosRequestConfig) {
        return PurchaseUsageApiFp(this.configuration).apiV1PurchaseUsagesPost(upsertPurchaseUsageEntry, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} purchaseUsageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1PurchaseUsagesPurchaseUsageIdDelete(purchaseUsageId: string, options?: RawAxiosRequestConfig) {
        return PurchaseUsageApiFp(this.configuration).apiV1PurchaseUsagesPurchaseUsageIdDelete(purchaseUsageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} purchaseUsageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1PurchaseUsagesPurchaseUsageIdGet(purchaseUsageId: string, options?: RawAxiosRequestConfig) {
        return PurchaseUsageApiFp(this.configuration).apiV1PurchaseUsagesPurchaseUsageIdGet(purchaseUsageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} purchaseUsageId 
     * @param {UpsertPurchaseUsageEntry} [upsertPurchaseUsageEntry] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public apiV1PurchaseUsagesPurchaseUsageIdPatch(purchaseUsageId: string, upsertPurchaseUsageEntry?: UpsertPurchaseUsageEntry, options?: RawAxiosRequestConfig) {
        return PurchaseUsageApiFp(this.configuration).apiV1PurchaseUsagesPurchaseUsageIdPatch(purchaseUsageId, upsertPurchaseUsageEntry, options).then((request) => request(this.axios, this.basePath));
    }
}

