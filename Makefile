# VibeSplit PWA Makefile
.PHONY: help build dev test deploy-local deploy-staging deploy-prod clean health rollback logs

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
DOCKER_IMAGE = vibesplit-pwa
CONTAINER_NAME = vibesplit-pwa
DOCKER_COMPOSE = docker-compose
PORT = 3000

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m # No Color

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
	@echo "$(YELLOW)VibeSplit PWA - –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(GREEN)%-20s$(NC) %s\n", $$1, $$2}'

install: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	@echo "$(YELLOW)üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	npm ci

build: ## –°–æ–±—Ä–∞—Ç—å PWA –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
	@echo "$(YELLOW)üî® –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...$(NC)"
	npm run build

build-docker: ## –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑
	@echo "$(YELLOW)üê≥ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞...$(NC)"
	docker build -t $(DOCKER_IMAGE):latest .

dev: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å development —Å–µ—Ä–≤–µ—Ä
	@echo "$(YELLOW)üöÄ –ó–∞–ø—É—Å–∫ development —Å–µ—Ä–≤–µ—Ä–∞...$(NC)"
	npm run dev

dev-docker: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å development –≤–µ—Ä—Å–∏—é –≤ Docker
	@echo "$(YELLOW)üöÄ –ó–∞–ø—É—Å–∫ development –≤–µ—Ä—Å–∏–∏ –≤ Docker...$(NC)"
	$(DOCKER_COMPOSE) up -d
	@echo "$(GREEN)‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ: http://localhost:$(PORT)$(NC)"

test: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
	@echo "$(YELLOW)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...$(NC)"
	npm run lint
	npm run type-check

test-build: ## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏
	@echo "$(YELLOW)üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏...$(NC)"
	npm run build
	npm run preview &
	sleep 5
	curl -f http://localhost:4173/ || exit 1
	pkill -f preview

deploy-local: ## –õ–æ–∫–∞–ª—å–Ω—ã–π –¥–µ–ø–ª–æ–π
	@echo "$(YELLOW)üöÄ –õ–æ–∫–∞–ª—å–Ω—ã–π –¥–µ–ø–ª–æ–π...$(NC)"
	./scripts/deploy.sh development

deploy-staging: ## –î–µ–ø–ª–æ–π –Ω–∞ staging
	@echo "$(YELLOW)üöÄ –î–µ–ø–ª–æ–π –Ω–∞ staging...$(NC)"
	./scripts/deploy.sh staging

health: ## –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
	@echo "$(YELLOW)üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è...$(NC)"
	./scripts/health-check.sh

rollback: ## –û—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏
	@echo "$(YELLOW)üîÑ –û—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏...$(NC)"
	./scripts/rollback.sh

logs: ## –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
	@echo "$(YELLOW)üìù –õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:$(NC)"
	docker logs $(CONTAINER_NAME) -f

logs-nginx: ## –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ Nginx
	@echo "$(YELLOW)üìù –õ–æ–≥–∏ Nginx:$(NC)"
	docker exec $(CONTAINER_NAME) tail -f /var/log/nginx/access.log

stop: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
	@echo "$(YELLOW)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...$(NC)"
	$(DOCKER_COMPOSE) down
	docker stop $(CONTAINER_NAME) 2>/dev/null || true

clean: ## –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã
	@echo "$(YELLOW)üßπ –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã...$(NC)"
	$(DOCKER_COMPOSE) down -v
	docker system prune -f
	docker volume prune -f
	rm -rf dist/ node_modules/.cache/

clean-all: ## –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–≤–∫–ª—é—á–∞—è node_modules)
	@echo "$(YELLOW)üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞...$(NC)"
	$(DOCKER_COMPOSE) down -v
	docker system prune -af
	docker volume prune -f
	rm -rf dist/ node_modules/ .cache/

status: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	@echo "$(YELLOW)üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:$(NC)"
	docker ps -a --filter name=$(CONTAINER_NAME)
	@echo ""
	@echo "$(YELLOW)üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:$(NC)"
	docker stats $(CONTAINER_NAME) --no-stream 2>/dev/null || echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"

backup: ## –°–æ–∑–¥–∞—Ç—å backup
	@echo "$(YELLOW)üì¶ –°–æ–∑–¥–∞–Ω–∏–µ backup...$(NC)"
	mkdir -p backups
	docker save $(DOCKER_IMAGE):latest | gzip > backups/vibesplit-$(shell date +%Y%m%d-%H%M%S).tar.gz
	@echo "$(GREEN)‚úÖ Backup —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–ø–∫–µ backups/$(NC)"

restart: stop dev-docker ## –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤

quick-deploy: build-docker stop ## –ë—ã—Å—Ç—Ä—ã–π –¥–µ–ø–ª–æ–π (—Å–±–æ—Ä–∫–∞ + –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ + –∑–∞–ø—É—Å–∫)
	@echo "$(YELLOW)‚ö° –ë—ã—Å—Ç—Ä—ã–π –¥–µ–ø–ª–æ–π...$(NC)"
	docker run -d \
		--name $(CONTAINER_NAME) \
		--restart unless-stopped \
		-p $(PORT):80 \
		$(DOCKER_IMAGE):latest
	@echo "$(GREEN)‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ: http://localhost:$(PORT)$(NC)"

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è production
prod-build: ## Production —Å–±–æ—Ä–∫–∞
	@echo "$(YELLOW)üè≠ Production —Å–±–æ—Ä–∫–∞...$(NC)"
	NODE_ENV=production npm run build
	docker build -t $(DOCKER_IMAGE):production .

prod-deploy: ## Production –¥–µ–ø–ª–æ–π (—Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ)
	@echo "$(YELLOW)üè≠ Production –¥–µ–ø–ª–æ–π...$(NC)"
	./scripts/deploy.sh production

# –£—Ç–∏–ª–∏—Ç—ã
shell: ## –í–æ–π—Ç–∏ –≤ shell –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
	docker exec -it $(CONTAINER_NAME) /bin/sh

inspect: ## –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
	docker inspect $(CONTAINER_NAME)

size: ## –†–∞–∑–º–µ—Ä –æ–±—Ä–∞–∑–∞ –∏ –±–∏–ª–¥–∞
	@echo "$(YELLOW)üìè –†–∞–∑–º–µ—Ä—ã:$(NC)"
	@echo "Docker –æ–±—Ä–∞–∑:"
	docker images $(DOCKER_IMAGE) --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
	@echo ""
	@echo "–ë–∏–ª–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:"
	@du -sh dist/ 2>/dev/null || echo "–ë–∏–ª–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω (–∑–∞–ø—É—Å—Ç–∏—Ç–µ make build)"

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
monitor: ## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
	@echo "$(YELLOW)üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):$(NC)"
	docker stats $(CONTAINER_NAME)

# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º help
.DEFAULT_GOAL := help