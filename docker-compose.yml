# Docker Compose для локального тестирования и разработки VibeSplit PWA
version: '3.8'

services:
  # Основное PWA приложение
  vibesplit-frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: vibesplit-pwa
    ports:
      - '3000:80'
    environment:
      - NODE_ENV=production
      - VITE_API_URL=${VITE_API_URL:-http://localhost:3001/api}
      - NGINX_WORKER_PROCESSES=auto
    volumes:
      # Логи для отладки
      - nginx_logs:/var/log/nginx
      # Кастомная конфигурация (если нужно)
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    restart: unless-stopped
    networks:
      - vibesplit-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:80/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - 'com.vibesplit.service=frontend'
      - 'com.vibesplit.version=1.0.0'

  # Мок API сервер для тестирования (опционально)
  mock-backend:
    image: wiremock/wiremock:2.35.0
    container_name: vibesplit-mock-api
    ports:
      - '3001:8080'
    volumes:
      - ./mock-api:/home/wiremock:ro
    command: ['--global-response-templating', '--verbose', '--port', '8080']
    networks:
      - vibesplit-network
    profiles:
      - testing
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/__admin/health']
      interval: 30s
      timeout: 5s
      retries: 3
    labels:
      - 'com.vibesplit.service=mock-api'

  # Nginx для продакшен-подобного прокси (опционально)
  nginx-proxy:
    image: nginx:1.24-alpine
    container_name: vibesplit-proxy
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/production:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - proxy_logs:/var/log/nginx
    depends_on:
      - vibesplit-frontend
    networks:
      - vibesplit-network
    profiles:
      - production-test
    restart: unless-stopped
    labels:
      - 'com.vibesplit.service=proxy'

  # Prometheus для мониторинга (опционально)
  prometheus:
    image: prom/prometheus:latest
    container_name: vibesplit-prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - vibesplit-network
    profiles:
      - monitoring
    restart: unless-stopped
    labels:
      - 'com.vibesplit.service=monitoring'

  # Grafana для визуализации метрик (опционально)
  grafana:
    image: grafana/grafana:latest
    container_name: vibesplit-grafana
    ports:
      - '3002:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_SERVER_DOMAIN=localhost
      - GF_SERVER_ROOT_URL=http://localhost:3002
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - vibesplit-network
    profiles:
      - monitoring
    restart: unless-stopped
    labels:
      - 'com.vibesplit.service=dashboard'

# Именованные тома для персистентности данных
volumes:
  nginx_logs:
    driver: local
  proxy_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Сеть для изоляции сервисов
networks:
  vibesplit-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
